---

-
  name: "Include release specific image versions"
  include_vars: ../shared_files/{{ rhmap_version }}.yml

  # as a first step, we check if there are pods which are not running the images
  # defined in their deployment configs.
  # this might be the case when an upgrade fails.
  # when the upgrade is run for the 2nd time, this check would be useful.
-
  name: "Read all current image versions from running Pods"
  shell: "oc describe pod $(oc get pods --namespace  {{ project_name }} | grep '{{ item }}.*Running' | awk '{print $1}') --namespace  {{ project_name }} | grep Image: | awk '{print $2}' | xargs -n1 | sort -u | xargs"
  register: pod_image_versions
  with_items: "{{ components | default([]) }}"
  changed_when: False

-
  name: "Read all current image versions in the deployment configs"
  shell:  "oc get dc {{ item }} --output jsonpath='{.spec.template.spec.containers[*].image}' --namespace  {{ project_name }} | xargs -n1 | sort -u | xargs"
  register: dc_image_versions
  with_items:
    - "{{ components}} "
  changed_when: False

-
  name: "Redeploy stale config if any exist"
  command: oc deploy --latest {{ item.0.item }}  --namespace  {{ project_name }} 
  when: item.0.stdout | replace('\n', ' ') not in item.1.stdout
  with_together:
    - "{{ pod_image_versions.results }}"
    - "{{ dc_image_versions.results }}"
  ignore_errors: True
  loop_control:
    label: "{{item[0].stdout}}"


# The following block of code will result in a pause for the MBaaS components for skipped tasks. This is an unavoidable limitation in
# Ansible at the moment

-
  include: rs-config.yml
  when: project_type == '3-node-mbaas'

-
  name: "Patch the new images to the existing deployconfig *** PLEASE NOTE THIS WILL TAKE SOME TIME ***"
  command: "oc patch dc {{ item.0.name}} --patch='{\"spec\":{\"template\":{\"spec\":{\"containers\":[{\"name\":\"{{ item.1.name }}\",\"image\":\"{{ item.1.image }}\" }]}}}}' --namespace {{ project_name }}"
  with_subelements:
    - "{{ deployments }}"
    -  containers
  register: patch_result
  when: 
    - item.0.name in components 
    - item.1.name != 'mongodb' or (item.1.name == 'mongodb' and project_type != '3-node-mbaas')
  failed_when: patch_result.stderr != '' and 'not found' not in patch_result.stderr
  changed_when: patch_result.rc == 0
  loop_control:
    pause: 20

- include: poller.yml

-
  name: "Check that Pods are running correct image versions"
  shell: "oc describe pod $(oc get pods --namespace  {{ project_name }} | grep '{{ item.0.name }}.*Running' | awk '{print $1}')  --namespace  {{ project_name }} | grep Image: | awk '{print $2}'"
  register: image_version
  with_subelements:
    - "{{ deployments }}"
    -  containers
  when: item.0.name in components
  changed_when: False
  failed_when:  item.1.image not in image_version.stdout_lines

-
  name: 'Patch platform-info ConfigMap for RHMAP Core'
  shell: 'oc patch configmap platform-info --type=''json'' -p=''[{"op": "replace", "path": "/data/core-version", "value":"{{ release_version }}"}, {"op": "replace", "path": "/data/platform-info.json", "value":"{\"version\": \"{{ release_version }}\",\"grid\": {\"id\": \"on-prem\",\"name\": \"On Premise\",\"region\": \" \"},\"site\": {\"id\": \"on-prem\"},\"env\": {\"id\": \"on-prem\",\"name\": \"On Premise\",\"size\": \" \",\"descr\": \" \"}}"}]''  --namespace  {{ project_name }} '
  when: project_type == 'core'

-
  name: 'Patch platform-info ConfigMap for RHMAP MBaaS'
  shell: 'oc patch configmap fh-mbaas-info  --type=''json'' -p=''[{"op": "replace", "path": "/data/version", "value":"{{ release_version }}"}]'' --namespace  {{ project_name }} '
  when: (project_type == '1-node-mbaas') or (project_type == '3-node-mbaas')

-
  name: "Run Nagios checks"
  include: nagios.yml
